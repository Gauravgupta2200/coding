#!/bin/bash

# Specify the URL of the Git repository containing the package.txt file
git_repo_url="https://github.com/Gauravgupta2200/coding.git"

# Specify the branch or commit where the package.txt file is located
git_branch_or_commit="main"

# Path to the package.txt file within the repository
package_file_path="Package/package.txt"

# Clone the Git repository to a temporary directory
temp_dir=$(mktemp -d)
git clone --branch "$git_branch_or_commit" "$git_repo_url" "$temp_dir"

# Check if the package file exists in the cloned repository
package_file="$temp_dir/$package_file_path"
if [ ! -f "$package_file" ]; then
  echo "Package file not found in the Git repository: $package_file"
  rm -rf "$temp_dir"  # Clean up temporary directory
  exit 1
fi

# Read the package names from the file into the 'packages' array
mapfile -t packages < "$package_file"

# Function to clean up the temporary directory
cleanup_temp_dir() {
  rm -rf "$temp_dir"
}

update_packages() {
  status_file="/opt/update_status.txt"

  > "$status_file"

  for package in "${packages[@]}"; do
    # Get the previous installed version
    previous_version=$(rpm -q "$package" --queryformat "%{VERSION}")

    echo "=====================Updating $package====================="

    # Update the package
    sudo yum update -y "$package"

    # Get the latest installed version after the update
    latest_version=$(rpm -q "$package" --queryformat "%{VERSION}")

    if [ $? -eq 0 ]; then
      echo "$package: Update successful (Previous version: $previous_version, Latest version: $latest_version)" >> "$status_file"
    else
      echo "$package: Update failed (Previous version: $previous_version, Latest version: $latest_version)" >> "$status_file"
    fi
  done
}

# Call the cleanup function when the script exits
trap cleanup_temp_dir EXIT

update_packages
